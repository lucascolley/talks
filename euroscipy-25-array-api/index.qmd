---
author: "[Lucas Colley](https://lucascolley.github.io)"
date: 2025-08-20
format: revealjs
subtitle: "[EuroSciPy 2025](https://euroscipy.org)"
title: "A Hitchhiker's Guide to the Array API Standard Ecosystem"
slug: euroscipy-25-array-api
---

# WARNING — DRAFT

{{< include /_includes/qr-code.qmd >}}

## About Me

::: {layout="[70,30]"}

::: {#first-column}

- Maintainer: SciPy, [Pixi](https://pixi.sh/latest/), array-api-extra
- Consortium for Python Data API Standards Member
- Computer Science & Philosophy Undergraduate, University of Oxford
- Working @ [prefix.dev](https://prefix.dev)\
(European Summer of Code)

:::

![](figures/headshot.png){fig-align="right"}

:::

## Agenda

1. The Idea, Motivation, and Solution
2. Tour of the Ecosystem
3. Status and Looking Forwards

# The Idea

## Arrays

- N-dimensional, grid-like data structure
- Most famously, `numpy.ndarray`
- "rectangular" shape, data type
- fast, easy to manipulate
- used everywhere

## Arrays

![](figures/numpy-usage.png)

## Ecosystem (now)

![Credit: [Aaron Meurer, ‘Python Array API Standard’, SciPy 2023](https://youtu.be/16rB-fosAWw)](figures/array-ecosystem.png)

## Ecosystem (the idea)

- TODO: diagram with lines removed (divided to unified)
- we want to remove these barriers between array ecosystems
- make each sub-ecosystem as interoperable as is helpful
- \+ interoperability with future tools

::: {.notes}
The idea of the talk: while some array consumer libs are very specific to one array type, lots of them are not really tied to one array type, or are only so tied by happenstance. The functionality they implement just consumes "arrays" of some sort.
:::

# Motivation

## Why? — End Users (1/2)

- want to be able to switch array libraries without reinventing their entire stack
    - real-world example: a reinforcement learning lab shifts their core pipelines from PyTorch to JAX[^1]
    - they probably had a lot of extra tools/scripts that are not specific to their domain of application\
    (e.g. I/O, functionality found in SciPy)
    - it shouldn't be difficult to keep these tools/scripts working

[^1]: [https://chrislu.page/blog/meta-disco/](https://chrislu.page/blog/meta-disco/)

## Why? — End Users (2/2)

- avoid repeated transfers between array libraries or devices in their pipelines
    - can be slow, and adds undesirable complexity
- enable experimentation:
    - try out new hardware
    - try out functionality specific to an array library

## Why? — Array *consuming* libraries

- provide users with hardware acceleration and interoperability
- *without* maintenance burden increasing massively
    - supporting 3 libraries shouldn't be 3x the effort!
- libraries with useful functionality shouldn't 'die' just because the ecosystem moves on to a new array library

## Why? — Array *providing* libraries

- existing libraries:
    - interoperability with shiny new consuming libraries
    - API decisions can be made collaboratively with other array libraries
- new libraries:
    - given a concrete API to implement
    - rewarded with automatic compatibility with consuming libraries

## Why? — Ecosystem

- reduce duplication
- functionality maintained in one place
- diagrams from last year

# Solution

## How?

- array-agnostic code
- the implementation approach: expanding circle diagram

## The Consortium

- 'The Consortium for Python Data API Standards'
- [https://data-apis.org]()
- cross-ecosystem consortium
- has been working on this for 5 years now

# Tour of the ecosystem

- diagram — the libraries making this implementation possible

## Tour — [`array-api`](https://data-apis.org/array-api/)

- what is it?
- who is it for? providers/consumers/end-users?

## The Array API Standard

- link to Aaron's SciPy talk
- past work, design principles, methodology

## Tour — [`array-api-tests`](https://data-apis.org/array-api-tests/)

- what is it?
- who is it for? providers/consumers/end-users?

## Tour — [`array-api-compat`](https://data-apis.org/array-api-compat/)

- what is it?
- who is it for? providers/consumers/end-users?
- what does real usage look like?

## Tour — [`array-api-strict`](https://data-apis.org/array-api-strict/)

- what is it?
- who is it for? providers/consumers/end-users?
- what does real usage look like?

## Tour — [`array-api-extra`](https://data-apis.org/array-api-extra/)

- what is it?
- who is it for? providers/consumers/end-users?
- what does real usage look like?

## Tour — [`array-api-typing`](https://github.com/data-apis/array-api-typing)

- what is it?
- who is it for? providers/consumers/end-users?

# Status

## Status — Ecosystem Overview

- summarise support across providers and consumers

## Status — Array Libraries

- ...

## Status — `scipy`

- what is it using that I've talked about so far
- what else is it using?
- enable with experimental env var
- coverage docs
- checkout out Evgeni's talk tomorrow for more info on recent and future SciPy work: https://euroscipy.org/talks/VAPDZX/

## Status — `scikit-learn`[^1] (1/2)

- experimental support (also uses `SCIPY_ARRAY_API` env var)
- vendoring `array-api-compat` and `array-api-extra`
- 3800+ tests:
    - libraries: `array-api-strict`, `cupy`, and `torch`
    - devices: CPU, MPS, CUDA (with GPU CI)
    - `float32` and `float64` dtypes

[^1]: thanks to Olivier Grisel for this update!

## Status — `scikit-learn`[^1] (2/2)

- 11 estimators (1 classifier, 1 regressor, 1 density estimator, 8 transformers)
- 42 public functions (scoring functions and distances computation)
- Up to 30x speed-up observed when using a GPU on Google Colab for estimators such as Gaussian Mixture Models or PCA

[^1]: thanks to [Olivier Grisel](https://github.com/ogrisel) for this update!

## Bonus Projects

- marray
- quantity-array (prototype)
- ...

## What's next?

- wider ecosystem adoption
- ...
- upstream testing utilities from `scipy`/`scikit-learn` to `array-api-extra`

## What else?

- SciPy compiled code: delegation, translation, dispatching
- ...

## With thanks to:

- all contributors to the projects discussed in this talk
- Ralf Gommers for leadership of the Consortium
- Patrick J. Roddy for this Quarto talk template
- the EuroSciPy organisers and volunteers
- everyone for your attention!
