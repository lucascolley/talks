---
author: "[Lucas Colley](https://lucascolley.github.io)"
date: 2025-08-20
format: revealjs
subtitle: "[EuroSciPy 2025](https://euroscipy.org)"
title: "A Hitchhiker's Guide to the Array API Standard Ecosystem"
slug: euroscipy-25-array-api
---

# WARNING — DRAFT

{{< include /_includes/qr-code.qmd >}}

## About Me

::: {layout="[70,30]"}

::: {#first-column}

- Maintainer: SciPy, [Pixi](https://pixi.sh/latest/), array-api-extra
- Consortium for Python Data API Standards Member
- Computer Science & Philosophy Undergraduate, University of Oxford
- Working @ [prefix.dev](https://prefix.dev)\
(European Summer of Code)

:::

![](figures/headshot.png){fig-align="right"}

:::

## Agenda

1. The Idea, Motivation, and Solution
2. Tour of the Ecosystem
3. Status and Looking Forwards

# The Idea

## Arrays

- N-dimensional, grid-like data structure
- Most famously, `numpy.ndarray`
- "rectangular" shape, data type
- fast, easy to manipulate
- used everywhere

## Arrays

![](figures/numpy-usage.png){height=550 fig-align="center"}

## Ecosystem (now)

![Credit: [Aaron Meurer, ‘Python Array API Standard’, SciPy 2023](https://youtu.be/16rB-fosAWw)](figures/array-ecosystem.png){width=100% fig-align="center"}

## Ecosystem (the idea)

![](figures/ecosystem-modified.png){width=100% fig-align="center"}

- we want to remove these barriers between array ecosystems

::: {.notes}
- some array consumer libs are doing things very specific to one array type
- but lots are only circumstantially tied to an array type
- the functionality they implement just consumes "arrays" of some sort
:::

# Motivation

## Why? — End Users (1/2)

- want to be able to switch array libraries without reinventing their entire stack
    - real-world example: a reinforcement learning lab shifts their core pipelines from PyTorch to JAX[^1]
    - they probably had a lot of extra tools/scripts that are not specific to their domain of application\
    (e.g. I/O, functionality found in SciPy)
    - it shouldn't be difficult to keep these tools/scripts working

[^1]: [https://chrislu.page/blog/meta-disco/](https://chrislu.page/blog/meta-disco/)

## Why? — End Users (2/2)

- avoid repeated transfers between array libraries or devices in their pipelines
    - can be slow, and adds undesirable complexity
- enable experimentation:
    - try out new hardware
    - try out functionality specific to an array library

## Why? — Array *consuming* libraries

- provide users with hardware acceleration and interoperability
- *without* maintenance burden increasing massively
    - supporting 3 libraries shouldn't be 3x the effort!
- libraries with useful functionality shouldn't 'die' just because the ecosystem moves on to a new array library

## Why? — Array *providing* libraries

- existing libraries:
    - interoperability with shiny new consuming libraries
    - API decisions can be made collaboratively with other array libraries
- new libraries:
    - given a concrete API to implement
    - rewarded with automatic compatibility with consuming libraries

## Why? — Ecosystem

![](figures/ecosystem-duplication.png)

## Why? — Ecosystem

![](figures/ecosystem-unified.png)

- reduce duplicate work and maintainer burden

# Solution

## How?

![](figures/strategy.png){width=60% fig-align="center"}

## The Consortium

::: {layout="[85,15]"}

::: {#first-column}

- 'The Consortium for
Python Data API Standards'
- [https://data-apis.org]()
- cross-ecosystem consortium
- has been working on this for 5 years now

:::

![](figures/data-apis.png){fig-align="right" width=100%}

:::

# Tour of the ecosystem

## Tour

TODO: diagram — the libraries making this implementation possible

## Tour — [`array-api`](https://data-apis.org/array-api/)

TODO:

- what is it?
- who is it for? providers/consumers/end-users?

## The Array API Standard

![[Aaron's SciPy 2023 Talk](https://youtu.be/16rB-fosAWw)](figures/array-api-talk.png){height=350}

- past work, design principles, methodology

## Tour — [`array-api-tests`](https://data-apis.org/array-api-tests/)

TODO:

- what is it?
- who is it for? providers/consumers/end-users?

## Tour — [`array-api-compat`](https://data-apis.org/array-api-compat/)

TODO:

- what is it?
- who is it for? providers/consumers/end-users?
- what does real usage look like (code)?

## Tour — [`array-api-strict`](https://data-apis.org/array-api-strict/)

TODO:

- what is it?
- who is it for? providers/consumers/end-users?
- what does real usage look like?

## Tour — [`array-api-extra`](https://data-apis.org/array-api-extra/)

TODO:

- what is it?
- who is it for? providers/consumers/end-users?
- what does real usage look like?

## Tour — [`array-api-typing`](https://github.com/data-apis/array-api-typing)

TODO:

- what is it?
- who is it for? providers/consumers/end-users?

# Status

## Status — Array Libraries

- `numpy`, `cupy`, `jax.numpy`:\
~full compatibility in main namespaces
- `torch`: ~full compatibility via `array-api-compat`
- `dask.array`: decent support via `array-api-compat`
- pretty good support in `ndonnx`, `cubed-dev/cubed`
- interest from `paddle`, `mlx`

## Status — `scipy` (1/3)

- experimental support via setting the environment variable\
`SCIPY_ARRAY_API=1`
- vendoring `array-api-compat` and `array-api-extra`
- testing against `array-api-strict`, `cupy`, `torch`, `jax.numpy`, `dask.array`
- CI: GPU job, `float32` PyTorch job

## Status — `scipy` (2/3)

[SciPy array API standard support documentation](https://scipy.github.io/devdocs/dev/api-dev/array_api.html)

- Now with API coverage tables!

::: {.r-stack}

![](figures/support-cpu.png){.fragment height=350}

![](figures/support-gpu.png){.fragment height=350}

![](figures/support-jit.png){.fragment height=350}

:::

## Status — `scipy` (3/3)

![](figures/scipy-languages.png){width=100%}

## Status — `scipy` (3/3)

Approaches for compiled code:

- delegation
- translation (`scipy.spatial.transform`)
- dispatching (discussion right after this!)

## Status — `scikit-learn`[^2] (1/3)

- experimental support (also uses `SCIPY_ARRAY_API` env var)
- vendoring `array-api-compat` and `array-api-extra`
- 3800+ tests:
    - libraries: `array-api-strict`, `cupy`, and `torch`
    - devices: CPU, MPS, CUDA (with GPU CI)
    - `float32` and `float64` dtypes

[^2]: thanks to [Olivier Grisel](https://github.com/ogrisel) for this update!

## Status — `scikit-learn`[^2] (2/3)

- 11 estimators (1 classifier, 1 regressor, 1 density estimator, 8 transformers)
- 42 public functions (scoring functions and distances computation)
- Up to 30x speed-up observed when using a GPU on Google Colab for estimators such as Gaussian Mixture Models or PCA

## Status — `scikit-learn` (3/3)

![[https://scikit-learn.org/dev/modules/array_api.html](https://scikit-learn.org/dev/modules/array_api.html)](figures/sklearn-docs.png){height=500}

## Status — other projects

- `glass-dev/GLASS`
- `magpylib`
- `icaros-usc/pyribs`
- `EleutherAI/polyapprox`
- `NeilGirdhar/efax`

## Bonus Projects

- `marray` — come and see my poster!
- `quantity-array` (prototype)

## What's next?

- mainly: more adoption in consuming libraries!
- upstreaming testing utilities from `scipy`/`scikit-learn`\
to `array-api-extra`
- `array-api-typing` development

## Sprint

- Come and chat about the standard, and/or contribute to `array-api-extra` (or `scipy`)!

## With thanks to:

- all contributors to the projects discussed in this talk
- Ralf Gommers for leadership of the Consortium
- Patrick J. Roddy for this Quarto talk template
- the EuroSciPy organisers and volunteers
- everyone for your attention!
